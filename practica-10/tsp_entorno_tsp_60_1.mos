!@encoding CP1252
model "tsp_entorno_tsp_60_1"
	! DECLARACIONES 1
	declarations
		n : integer;
	end-declarations
	
	! INICIALIZACION 1
	fopen("data/tsp_60_1.txt", F_INPUT);
	read(n);
	
	! DECLARACIONES 2
	declarations
		p_nodos		= 1..n;
		
		coords		: array(p_nodos, 1..3) of integer;
		
		distancias	: array(p_nodos, p_nodos) of integer;
		visitados	: array(p_nodos) of integer;
		siguientes	: array(p_nodos) of integer;
	end-declarations
	
	! INICIALIZACION 2
	forall(i in p_nodos) do
		read(coords(i,1));
		read(coords(i,2));
		read(coords(i,3));
	end-do
	fclose(F_INPUT);
	
	! Calculamos las distancias mediante las coordenadas leidas
	forall(i in p_nodos, j in p_nodos)
		if (i <> j) then
			distancias(i,j) := round(sqrt( (coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2 ));
		else
			distancias(i,j) := MAX_INT;
		end-if
	
	
	!==============================================================================
	! SOLUCION TSP GREEDY
	!==============================================================================
	nodo_inicial	:= ceil(n * random);
	nodo_anterior	:= nodo_inicial;
	visitados(nodo_inicial) := 1;
	num_nodos := 1;
	
	distancia_total := 0;
	while (num_nodos < n) do
		! Buscamos el i más cercano
		aux := MAX_INT;
		forall(i in p_nodos | visitados(i) <> 1) do
			if(distancias(nodo_anterior, i) < aux) then
				aux := distancias(nodo_anterior, i);
				i_cercano := i;
			end-if
		end-do
		
		! Introducimos el i aleatorio en la solucion
		siguientes(nodo_anterior) := i_cercano;
		visitados(i_cercano) := 1;
		distancia_total += distancias(nodo_anterior, i_cercano);
		num_nodos += 1;
		
		nodo_anterior := i_cercano;
	end-do
	
	! Añadimos la conexión entre el último nodo y el primero
	siguientes(nodo_anterior) := nodo_inicial;
	distancia_total += distancias(nodo_anterior, nodo_inicial);
	
	
	! SALIDA
	writeln("Problema TSP (n = ", n, ")");
	writeln("Distancia Total: ", distancia_total);
		
	write("\nConexiones:");
	aux := 1;
	flag := 0;
	while(flag = 0) do
		if(siguientes(aux) = 1) then
			flag := 1;
		else
			write(" -> ", siguientes(aux));
			aux := siguientes(aux);
		end-if
	end-do
end-model
