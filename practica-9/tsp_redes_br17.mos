!@encoding CP1252
model "tsp_redes_br17"
	uses "mmxprs";
	
	! DECLARACIONES 1
	declarations
		archivo_datos	= "data/br17.dat"
		n				: integer;
	end-declarations
	
	! INICIALIZACION 1
	initializations from archivo_datos
		n;
	end-initializations
	
	! DECLARACIONES 2
	declarations
		p_nodos	= 1..n;
		
		d		: array(p_nodos, p_nodos) of integer;
		b		: array(p_nodos) of integer;
		
		x		: array(p_nodos, p_nodos) of mpvar;
		y		: array(p_nodos, p_nodos) of mpvar;
	end-declarations
	
	! INICIALIZACION 2
	initializations from archivo_datos
		d;
	end-initializations
	
	b(1) := n - 1;
	forall(i in 2..n)
		b(i) := -1;
	
	! MODELO
	! x(i,j) binaria
	forall(i in p_nodos, j in p_nodos)
		x(i,j) is_binary;
	
	! Hay unicamente una arista que entra en cada punto
	forall(j in p_nodos)
		rest_j(j) := sum(i in p_nodos) x(i,j) = 1;
	
	! Hay unicamente una arista que sale de cada punto
	forall(i in p_nodos)
		rest_i(i) := sum(j in p_nodos) x(i,j) = 1;
	
	! Restricciones del problema de redes
	forall(i in p_nodos)
		redes1(i) := sum(j in p_nodos) y(i,j) - sum(j in p_nodos) y(j,i) = b(i);
	
	forall(i in p_nodos, j in p_nodos) do
		redes2_1(i,j) := y(i,j) >= 0
		redes2_2(i,j) := y(i,j) <= (n - 1) * x(i,j);
	end-do
	
	! Valor a minimizar
	solucion := sum(i in p_nodos, j in p_nodos) d(i,j) * x(i,j);
	minimize(solucion);
	
	! SALIDA
	writeln("Problema TSP con restricciones de redes (n = ", n, ")");
	writeln("Solucion: ", getobjval);
	writeln("\nValores de x:");
	forall(i in p_nodos, j in p_nodos | x(i,j).sol = 1)
		write(" (", i, ", ", j, ")");
end-model
