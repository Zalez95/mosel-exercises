!@encoding CP1252
model "cvrp_redes_oil_delivery"
	uses "mmxprs";
	setparam("XPRS_MAXTIME", 100);							! Limite de tiempo de ejecucion

	! DECLARACIONES 1
	declarations
		archivo_datos	= "data/oil-delivery.dat";
		nombre_problema	: string;							! Nombre del problema
		n				: integer;							! Numero de vertices
		capacidad		: integer;							! Capacidad de los vehiculos
	end-declarations

	! INICIALIZACION 1
	initializations from archivo_datos
		nombre_problema;
		n;
		capacidad;
	end-initializations

	! DECLARACIONES 2
	declarations
		clientes	= 2..n;
		vertices	= 1..n;

		c			: array(vertices, vertices) of integer;	! Costes
		d			: array(vertices) of integer;			! Demanda incluyendo la demanda ficticia del origen
		b			: array(vertices) of integer;			! Ofertas de los vertices

		x			: array(vertices, vertices) of mpvar;	! Arcos de la solucion
		y			: array(vertices, vertices) of mpvar;	! Arcos de la solucion
	end-declarations

	! INICIALIZACION 2
	initializations from archivo_datos
		c;
		d;
	end-initializations

	! Calculamos las ofertas de cada vertice
	b(1) := sum(i in clientes) d(i);
	forall(i in clientes)
		b(i) := -d(i);

	!==============================================================================
	! MODELO
	!==============================================================================
	! Nos aseguramos de que cada cliente tenga un arco de salida
	forall(i in clientes)
		cliente_salida(i) := sum(j in vertices) x(i,j) = 1;

	! Nos aseguramos de que cada cliente tenga un arco de entrada
	forall(j in clientes)
		cliente_entrada(j) := sum(i in vertices) x(i,j) = 1;

	! Nos aseguramos de que no se creen subtours aislados
	forall(i in vertices)
		no_subtours(i) := (sum(j in vertices) y(i,j)) - (sum(j in vertices) y(j,i)) = b(i);

	! No se supere la capacidad de los vehiculos
	forall(i in vertices, j in vertices)
		cap(i,j) := y(i,j) <= capacidad * x(i,j);

	! y ha de ser mayor o igual que 0
	forall(i in vertices, j in vertices)
		y_no_negativo(i,j) := y(i,j) >= 0;

	! x ha de ser una variable binaria
	forall(i in vertices, j in vertices)
		x(i,j) is_binary;

	! Valor a minimizar
	z := sum(i in vertices, j in vertices) c(i,j) * x(i,j);
	minimize(z);

	!==============================================================================
	! SALIDA
	!==============================================================================
	writeln("Practica 15 CVRP redes \"", nombre_problema, "\" (n=", n, "):");
	writeln("\tz = ", getobjval);
	writeln("\tNumero de vehiculos = ", sum(j in vertices | x(1,j).sol >= 0.99) 1);
	write("\tarcos:");
	forall(i in vertices, j in vertices | x(i,j).sol >= 0.99)
		write(" (", i, "," , j , ")");
end-model
