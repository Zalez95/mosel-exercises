!@encoding CP1252
model "tsp_grasp_tsp_100_1"
	! DECLARACIONES 1
	declarations
		archivo_datos	= "data/tsp_100_1.txt"
		MAX_N			= [30, 60, 100];
		MAX_K			= 5;
		n				: integer;
	end-declarations
	
	! INICIALIZACION 1
	fopen(archivo_datos, F_INPUT);
	read(n);
	
	! DECLARACIONES 2
	declarations
		p_nodos	= 1..n;
		
		coords		: array(p_nodos, 1..3) of real;
		
		distancias	: array(p_nodos, p_nodos) of integer;
		visitados	: array(p_nodos) of integer;
		siguientes	: array(p_nodos) of integer;
		siguientes2	: array(p_nodos) of integer;
		siguientes3	: array(p_nodos) of integer;
		
		lista_rcl	: array(1..MAX_K) of integer;
		marcados	: array(p_nodos) of integer;
	end-declarations
	
	! INICIALIZACION 2
	forall(i in p_nodos) do
		read(coords(i,1));
		read(coords(i,2));
		read(coords(i,3));
	end-do
	fclose(F_INPUT);
		
	! Calculamos las distancias mediante las coordenadas leidas
	forall(i in p_nodos, j in p_nodos)
		if (i <> j) then
			distancias(i,j) := round(sqrt( (coords(i,2) - coords(j,2))^2 + (coords(i,3) - coords(j,3))^2 ));
		else
			distancias(i,j) := MAX_INT;
		end-if
	

	writeln("Problema TSP con solucion GRASP (n = ", n, "):");	
	forall(N_actual in MAX_N) do
		writeln("N = ", N_actual, ":");
	
		!==============================================================================
		! SOLUCION TSP GRASP
		!==============================================================================
		distancia_minima := MAX_INT;
		forall(it in 1..N_actual) do
			! Inicializacion
			forall(i in p_nodos) do
				visitados(i) := 0;
			end-do
			
			nodo_inicial	:= ceil(n * random);
			nodo_anterior	:= nodo_inicial;
			visitados(nodo_inicial) := 1;
			num_nodos := 1;
			
			distancia_total := 0;
			while (num_nodos < n) do
				! Limpiamos el vector de marcados de la lista RCL
				forall(i in p_nodos) do
					marcados(i) := 0;
				end-do
				
				! Creamos la lista RCL
				forall(r in 1..MAX_K) do
					! Buscamos el i más cercano que no esté todavía en la lista RCL
					aux := MAX_INT;
					forall(i in p_nodos | visitados(i) <> 1 and marcados(i) <> 1) do
						if(distancias(nodo_anterior, i) < aux) then
							aux := distancias(nodo_anterior, i);
							i_cercano := i;
						end-if
					end-do
					
					! Introducimos el i más cercano en la lista RCL
					lista_rcl(r) := i_cercano;
					marcados(i_cercano) := 1;
				end-do
				
				! Escogemos un elemento aleatorio de la lista RCL
				i_rcl := lista_rcl( ceil(MAX_K * random) );
				
				! Introducimos el i aleatorio en la solucion
				siguientes2(nodo_anterior) := i_rcl;
				visitados(i_rcl) := 1;
				distancia_total += distancias(nodo_anterior, i_rcl);
				num_nodos += 1;
				
				nodo_anterior := i_rcl;
			end-do
			
			! Añadimos la conexión entre el último nodo y el primero
			siguientes2(nodo_anterior) := nodo_inicial;
			distancia_total += distancias(nodo_anterior, nodo_inicial);
	
	
			! Hacemos la mejora 2-OPT
			flag1 := 0;
			while(flag1 = 0) do
				mejora_max := 0;
				i_intercambio := -1; j_intercambio := -1; 
				
				forall(	i in p_nodos, j in p_nodos |
						i <> j and siguientes2(i) <> j and siguientes2(j) <> i ) do
					! Calculamos la mejora del intercambio
					s_i := siguientes2(i);
					s_j := siguientes2(j);
					delta_ij := distancias(i,s_i) + distancias(j,s_j) -
								distancias(i,j) - distancias(s_i,s_j);
								
					if(delta_ij > mejora_max) then
						mejora_max := delta_ij;
						i_intercambio := i;
						j_intercambio := j;
					end-if
				end-do
				
				if(mejora_max = 0) then
					! Salimos del bucle sin hacer el intercambio
					flag1 := 1;
				else
					! Realizamos el intercambio
					siguientes3 := siguientes2;
								
					siguientes2(i_intercambio) := j_intercambio;
					siguientes2(siguientes3(i_intercambio)) := siguientes3(j_intercambio);
					
					flag	:= 0;
					actual	:= siguientes3(i_intercambio);
					while(flag = 0) do
						if (actual = j_intercambio) then
							flag := 1;
						else
							siguiente := siguientes3(actual);
							siguientes2(siguiente) := actual;
							actual := siguiente;
						end-if
					end-do
					
					! Actualizamos la distancia total
					distancia_total -= mejora_max;
				end-if
			end-do
	
	
			! Comprobamos si la solución actual	es mejor a la de las iteraciones anteriores de N
			if(distancia_total < distancia_minima) then
				distancia_minima := distancia_total;
				siguientes := siguientes2;
			end-if
		end-do
		
		
		! SALIDA
		writeln("Distancia Total: ", distancia_minima);	
		write("Conexiones:");
		nodo_inicial	:= ceil(n * random);
		nodo_actual		:= nodo_inicial;
		flag := 0;
		while(flag = 0) do
			if(siguientes(nodo_actual) = nodo_inicial) then
				flag := 1;
			else
				write(" -> ", siguientes(nodo_actual));
				nodo_actual := siguientes(nodo_actual);
			end-if
		end-do
		writeln("\n");
	end-do	
end-model
